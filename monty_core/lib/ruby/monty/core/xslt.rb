gem 'libxslt-ruby'
require 'xslt'

module Monty
  module Core
    # A XSLT stylesheet generated by XsltGenerator containing a list of entropy parameters.
    # 
    # This object may be cached in-memory to be applied to the input document and state
    # by an XslProcessor object.
    #
    # FIXME: Rename Xsl.
    class Xslt
      include Monty::Core::Options

      # String containing the XSL.
      attr_accessor :data

      # If true the XSL is an identity transform.
      attr_accessor :identity
      
      # List of parameter names for the transform.
      attr_reader   :parameters

      # Optional data Hash.
      attr_accessor :optional_data

      def initialize_before_opts
        super
        @data = ''
        @parameters = [ ]
        @identity = nil # UNKNOWN.
      end

      def add_parameter! var
        @parameters << var.to_sym
      end

      def write str
        str = str.to_s
        @identity = false unless str.empty?
        @data << str
      end
      alias :<< :write

      def identity?
        return @identity if ! @identity.nil?
        @data.empty?
      end

      # Returns the cached XSLT::Stylesheet object from the data String.
      def stylesheet
        @stylesheet ||=
          XSLT::Stylesheet.new(XML::Document.string(data))
      end

      # Returns a new Processor object.
      def processor opts = { }
        opts[:xsl] = self
        Monty::Core::XslProcessor.new(opts)
      end


      HEADER = <<'END'.freeze
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                              xmlns:exslt="http://exslt.org/common">
END
      def header
        HEADER
      end

      FOOTER = <<'END'.freeze
<!-- footer -->
</xsl:stylesheet>
END

      def footer
        FOOTER
      end
    end # class
  end # module
end # module

